openapi: 3.0.0
info:
  title: BookCompass API
  description: API for the BookCompass platform, allowing users to browse, purchase, and access digital books, and sellers to manage their book listings and orders.
  version: 1.0.0

servers:
  - url: http://localhost:5000
    description: Local development server
  - url: https://bookcompass.onrender.com
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the user.
        name:
          type: string
          description: The user's name.
        email:
          type: string
          description: The user's email address.
        role:
          type: string
          enum: [seller, buyer]
          description: The user's role (either "seller" or "buyer").
        location:
          type: object
          properties:
            address:
              type: string
              description: The user's address.
            coordinates:
              type: object
              properties:
                lat:
                  type: number
                lng:
                  type: number
        profileImageUrl:
          type: string
          description: URL to the user's profile image.
        isEmailConfirmed:
          type: boolean
          description: Indicates if the user's email is confirmed.
        confirmationToken:
          type: string
          description: Token for email confirmation.
        confirmationSentAt:
          type: string
          format: date-time
          description: Timestamp when the email confirmation was sent.
        resetPasswordToken:
          type: string
          description: Token for password reset.
        resetPasswordExpire:
          type: string
          format: date-time
          description: Expiration time for the password reset token.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - email
        - role
        - profileImageUrl

    Book:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the book.
        title:
          type: string
          description: The title of the book.
        author:
          type: string
          description: The author of the book.
        description:
          type: string
          description: A description of the book.
        price:
          type: number
          description: The price of the book in ETB.
        stock:
          type: number
          description: The stock quantity (null for digital books).
        category:
          type: string
          enum: [Fiction, Non-Fiction, Science, History, Biography, Other]
          description: The category of the book.
        imageUrl:
          type: string
          description: URL to the book's cover image.
        seller:
          type: string
          description: The ID of the seller (references User).
        isbn:
          type: string
          description: The ISBN of the book.
        isDigital:
          type: boolean
          description: Indicates if the book is digital.
        fileUrl:
          type: string
          description: URL to the digital book file (required for digital books).
        averageRating:
          type: number
          description: The average rating of the book.
        numReviews:
          type: number
          description: The number of reviews for the book.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - title
        - author
        - price
        - category
        - seller
        - isbn
        - isDigital

    Cart:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the cart.
        user:
          type: string
          description: The ID of the user (references User).
        items:
          type: array
          items:
            type: object
            properties:
              book:
                type: string
                description: The ID of the book (references Book).
              quantity:
                type: integer
                description: The quantity of the book in the cart.
        totalPrice:
          type: number
          description: The total price of the items in the cart.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - user
        - items
        - totalPrice

    Order:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the order.
        user:
          type: string
          description: The ID of the user who placed the order (references User).
        cart:
          type: string
          description: The ID of the cart (references Cart).
        items:
          type: array
          items:
            type: object
            properties:
              seller:
                type: string
                description: The ID of the seller (references User).
              book:
                type: string
                description: The ID of the book (references Book).
              quantity:
                type: integer
                description: The quantity of the book ordered.
              price:
                type: number
                description: The price of the book at the time of order.
        pricing:
          type: object
          properties:
            subtotal:
              type: number
              description: The subtotal for the order.
            deliveryFee:
              type: number
              description: The delivery fee.
            total:
              type: number
              description: The total amount for the order.
            sellerBreakdown:
              type: array
              items:
                type: object
                properties:
                  seller:
                    type: string
                    description: The ID of the seller (references User).
                  subtotal:
                    type: number
                  deliveryFee:
                    type: number
                  total:
                    type: number
                  distance:
                    type: number
                    description: Distance in kilometers.
                  fromLocation:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: [Point]
                      coordinates:
                        type: array
                        items:
                          type: number
                        description: [longitude, latitude]
                  toLocation:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: [Point]
                      coordinates:
                        type: array
                        items:
                          type: number
                        description: [longitude, latitude]
        paymentStatus:
          type: string
          enum: [pending, paid, failed]
          description: The payment status of the order.
        orderStatus:
          type: string
          enum: [processing, shipped, delivered, canceled]
          description: The status of the order.
        txRef:
          type: string
          description: The transaction reference for the payment.
        transactionDetails:
          type: object
          description: Additional details about the transaction.
        shippingAddress:
          type: string
          description: The shipping address (optional for digital books).
        shippingLocation:
          type: object
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: array
              items:
                type: number
              description: [longitude, latitude]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deliveryFee:
          type: number
          description: Virtual field for simplified frontend display.
        totalPrice:
          type: number
          description: Virtual field for simplified frontend display.
      required:
        - user
        - cart
        - items
        - pricing
        - paymentStatus
        - orderStatus

    Review:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the review.
        user:
          type: string
          description: The ID of the user who wrote the review (references User).
        book:
          type: string
          description: The ID of the book being reviewed (references Book).
        rating:
          type: number
          description: The rating (1-5 stars).
        comment:
          type: string
          description: An optional comment about the book.
        createdAt:
          type: string
          format: date-time
      required:
        - user
        - book
        - rating

    Error:
      type: object
      properties:
        error:
          type: string
          description: The error message.
      required:
        - error

paths:
  # Authentication Routes
  /api/auth/register:
    post:
      summary: Register a new user or seller
      description: Creates a new user or seller account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: [seller, buyer]
              required:
                - name
                - email
                - password
                - role
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for the new user.
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request (e.g., email already exists)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: Log in a user or seller
      description: Authenticates a user or seller and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for the user.
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/me:
    get:
      summary: Get current user
      description: Retrieves the details of the currently authenticated user.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/forgotPassword:
    post:
      summary: Request password reset
      description: Sends a password reset email to the user.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
                - email
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad request (e.g., email not found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/resetPassword/{token}:
    put:
      summary: Reset password
      description: Resets the user's password using a reset token.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: The password reset token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
              required:
                - password
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad request (e.g., invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/confirmEmail/{token}:
    get:
      summary: Confirm email
      description: Confirms the user's email using a confirmation token.
      parameters:
        - in: path
          name: token
          schema:
            type: string
          required: true
          description: The email confirmation token.
      responses:
        '200':
          description: Email confirmed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad request (e.g., invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Book Routes
  /api/books/getDigitalBooks:
    get:
      summary: Get all digital books
      description: Retrieves a list of all digital books.
      responses:
        '200':
          description: List of digital books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /api/books/getPhysicalBooks:
    get:
      summary: Get all physical books
      description: Retrieves a list of all physical books.
      responses:
        '200':
          description: List of physical books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /api/books/singleBook/{id}:
    get:
      summary: Get a single book
      description: Retrieves the details of a specific book by ID.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the book.
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/books/getBook/myBooks:
    get:
      summary: Get seller's books
      description: Retrieves a list of books created by the authenticated seller.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of seller's books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a seller)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/books/createBook:
    post:
      summary: Create a new book (seller only)
      description: Allows a seller to create a new book listing, including uploading a digital file if the book is digital.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                category:
                  type: string
                  enum: [Fiction, Non-Fiction, Science, History, Biography, Other]
                isbn:
                  type: string
                isDigital:
                  type: boolean
                file:
                  type: string
                  format: binary
                  description: The digital book file (e.g., PDF).
                image:
                  type: string
                  format: binary
                  description: The book cover image.
              required:
                - title
                - author
                - price
                - category
                - isbn
                - isDigital
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request (e.g., missing required fields)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a seller)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/books/updateBook/{id}:
    put:
      summary: Update a book (seller only)
      description: Allows a seller to update an existing book listing.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the book to update.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: integer
                category:
                  type: string
                  enum: [Fiction, Non-Fiction, Science, History, Biography, Other]
                isbn:
                  type: string
                isDigital:
                  type: boolean
                file:
                  type: string
                  format: binary
                  description: The digital book file (e.g., PDF).
                image:
                  type: string
                  format: binary
                  description: The book cover image.
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Bad request (e.g., invalid data)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a seller)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/books/deleteBook/{id}:
    delete:
      summary: Delete a book (seller only)
      description: Allows a seller to delete a book listing.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the book to delete.
      responses:
        '200':
          description: Book deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a seller)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Cart Routes
  /api/cart/getCart:
    get:
      summary: Get user's cart
      description: Retrieves the cart for the authenticated user (buyer only).
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User's cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a buyer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/cart/createCart:
    post:
      summary: Add to cart (buyer only)
      description: Adds a book to the user's cart.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: string
                quantity:
                  type: integer
              required:
                - bookId
                - quantity
      responses:
        '200':
          description: Book added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad request (e.g., invalid bookId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a buyer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/cart/updateCart/{id}:
    put:
      summary: Update cart item (buyer only)
      description: Updates the quantity of a book in the user's cart.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the cart item to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
              required:
                - quantity
      responses:
        '200':
          description: Cart item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '400':
          description: Bad request (e.g., invalid quantity)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a buyer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/cart/deleteCart/{id}:
    delete:
      summary: Delete cart item (buyer only)
      description: Removes a book from the user's cart.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the cart item to delete.
      responses:
        '200':
          description: Cart item deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a buyer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cart item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Order Routes
  /api/order/createOrder:
    post:
      summary: Create a new order
      description: Creates a new order for the authenticated user.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemsId:
                  type: array
                  items:
                    type: string
                shippingAddress:
                  type: string
                shippingLocation:
                  type: object
                  properties:
                    type:
                      type: string
                      enum: [Point]
                    coordinates:
                      type: array
                      items:
                        type: number
              required:
                - itemsId
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  txRef:
                    type: string
                    description: Transaction reference for the payment.
                  checkoutUrl:
                    type: string
                    description: URL to complete the payment via Chapa.
        '400':
          description: Bad request (e.g., invalid items)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/order/getOrder:
    get:
      summary: Get all orders
      description: Retrieves a list of all orders placed by the authenticated user (or related to the seller).
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/order/getOrder/{id}:
    get:
      summary: Get a single order
      description: Retrieves the details of a specific order by ID.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the order.
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not authorized to view order)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/order/updateOrder/{id}/status:
    put:
      summary: Update order status (seller only)
      description: Updates the status of an order (e.g., to shipped, delivered).
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the order to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderStatus:
                  type: string
                  enum: [processing, shipped, delivered, canceled]
              required:
                - orderStatus
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request (e.g., invalid status)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a seller)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/order/updateStatus/{id}/cancel:
    put:
      summary: Cancel an order
      description: Cancels an order if it is in the "processing" state.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the order to cancel.
      responses:
        '200':
          description: Order canceled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request (e.g., order cannot be canceled)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/order/deleteOrder/{id}:
    delete:
      summary: Delete an order (seller only)
      description: Deletes an order (intended for admin or seller use).
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The ID of the order to delete.
      responses:
        '200':
          description: Order deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a seller)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/order/reports:
    get:
      summary: Get order reports (seller only)
      description: Retrieves order reports for the authenticated seller.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Order reports
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    order:
                      $ref: '#/components/schemas/Order'
                    # Add more fields as needed based on your implementation
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not a seller)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/order/payment-callback:
    get:
      summary: Verify payment
      description: Verifies the payment status for an order (used as a callback from Chapa).
      parameters:
        - in: query
          name: tx_ref
          schema:
            type: string
          required: true
          description: The transaction reference to verify.
      responses:
        '302':
          description: Redirects to payment-success endpoint if payment is verified.
        '400':
          description: Bad request (e.g., missing tx_ref)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/order/payment-success:
    get:
      summary: Payment success details
      description: Returns the details of a successful payment and order.
      parameters:
        - in: query
          name: tx_ref
          schema:
            type: string
          required: true
          description: The transaction reference for the order.
      responses:
        '200':
          description: Payment successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  orderDetails:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            bookTitle:
                              type: string
                            price:
                              type: number
                            quantity:
                              type: integer
                            sellerName:
                              type: string
                            isDigital:
                              type: boolean
                            accessUrl:
                              type: string
                            downloadUrl:
                              type: string
                      pricing:
                        type: object
                        properties:
                          subtotal:
                            type: number
                          deliveryFee:
                            type: number
                          total:
                            type: number
                  paymentDetails:
                    type: object
                    properties:
                      amount:
                        type: number
                      currency:
                        type: string
                      charge:
                        type: number
                      status:
                        type: string
                      reference:
                        type: string
                      date:
                        type: string
                      receiptUrl:
                        type: string
        '400':
          description: Bad request (e.g., missing tx_ref)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/order/stream/{bookId}:
    get:
      summary: Stream a digital book
      description: Streams a digital book to the user if they have purchased it.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: bookId
          schema:
            type: string
          required: true
          description: The ID of the book to stream.
        - in: query
          name: download
          schema:
            type: boolean
          description: If true, prompts a download instead of streaming inline.
      responses:
        '200':
          description: Streams the digital book
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (user does not have access to the book)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Review Routes
  /api/reviews/{bookId}/reviews:
    post:
      summary: Create a review for a book
      description: Allows an authenticated user to create a review for a book.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: bookId
          schema:
            type: string
          required: true
          description: The ID of the book to review.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
                  maxLength: 500
              required:
                - rating
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Bad request (e.g., invalid rating)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get reviews for a book
      description: Retrieves all reviews for a specific book.
      parameters:
        - in: path
          name: bookId
          schema:
            type: string
          required: true
          description: The ID of the book.
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/reviews/{bookId}/reviews/{reviewId}:
    put:
      summary: Update a review
      description: Allows the reviewer to update their review for a book.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: bookId
          schema:
            type: string
          required: true
          description: The ID of the book.
        - in: path
          name: reviewId
          schema:
            type: string
          required: true
          description: The ID of the review to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
                  maxLength: 500
              required:
                - rating
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Bad request (e.g., invalid rating)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not the reviewer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Review or book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete a review
      description: Allows the reviewer to delete their review for a book.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: bookId
          schema:
            type: string
          required: true
          description: The ID of the book.
        - in: path
          name: reviewId
          schema:
            type: string
          required: true
          description: The ID of the review to delete.
      responses:
        '200':
          description: Review deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized (no token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (not the reviewer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Review or book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'