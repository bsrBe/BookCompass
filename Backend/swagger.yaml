openapi: 3.0.0
info:
  title: BookCompass API
  description: API for the BookCompass platform, allowing users to browse, purchase, and access digital books and audiobooks, and sellers/admins to manage listings and orders.
  version: 1.0.1 # Incremented version due to significant changes

servers:
  - url: http://localhost:5000
    description: Local development server
  - url: https://bookcompass.onrender.com
    description: Production server

tags:
  - name: Authentication
    description: User authentication operations
  - name: Users
    description: User profile and library management
  - name: Books
    description: Book listing and management operations
  - name: Cart
    description: Shopping cart operations
  - name: Orders
    description: Order processing and management
  - name: Reviews
    description: Book review operations
  - name: Admin
    description: Admin-specific operations for platform management

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the user.
        name:
          type: string
          description: The user's name.
        email:
          type: string
          description: The user's email address.
        role:
          type: string
          enum: [seller, buyer, admin] # Added admin role
          description: The user's role.
        location:
          type: object
          properties:
            address:
              type: string
              description: The user's address.
            coordinates:
              type: object
              properties:
                lat:
                  type: number
                lng:
                  type: number
        profileImageUrl:
          type: string
          description: URL to the user's profile image.
        isEmailConfirmed:
          type: boolean
          description: Indicates if the user's email is confirmed.
        # Removed confirmationToken, confirmationSentAt, resetPasswordToken, resetPasswordExpire for brevity as they are internal
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - email
        - role

    Book:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the book.
        title:
          type: string
          description: The title of the book.
        author:
          type: string
          description: The author of the book.
        description:
          type: string
          description: A description of the book.
        price:
          type: number
          description: The price of the book in ETB.
        stock:
          type: number
          nullable: true
          description: The stock quantity (null for digital books/audiobooks).
        category:
          type: string
          enum: [Fiction, Non-Fiction, Science, History, Biography, Other]
          description: The category of the book.
        imageUrl:
          type: string
          description: URL to the book's cover image.
        seller:
          type: string
          description: The ID of the seller (references User).
        isbn:
          type: string
          description: The ISBN of the book.
        isDigital:
          type: boolean
          description: Indicates if the book is a digital e-book (e.g., PDF).
        isAudiobook: # New field
          type: boolean
          description: Indicates if the book is an audiobook (e.g., MP3).
        fileUrl:
          type: string
          nullable: true
          description: URL to the digital book file (PDF) or audiobook file (MP3). Required if isDigital or isAudiobook is true.
        averageRating:
          type: number
          description: The average rating of the book.
        numReviews:
          type: number
          description: The number of reviews for the book.
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - title
        - author
        - price
        - category
        - seller
        - isbn
        # isDigital and isAudiobook are not strictly required at top level, but logic implies one should be true for digital content

    Cart:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              book:
                type: string # Ref to Book _id
              quantity:
                type: integer
        totalPrice:
          type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - user
        - items
        - totalPrice

    Order:
      type: object
      # Keeping Order schema as is, specific accessUrl for audiobooks handled in payment-success response
      properties:
        _id:
          type: string
        user:
          type: string
        cart:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              seller:
                type: string
              book:
                type: string
              quantity:
                type: integer
              price:
                type: number
        pricing:
          type: object
          properties:
            subtotal:
              type: number
            deliveryFee:
              type: number
            total:
              type: number
            # sellerBreakdown omitted for brevity, assume it's still there
        paymentStatus:
          type: string
          enum: [pending, paid, failed]
        orderStatus:
          type: string
          enum: [processing, shipped, delivered, canceled]
        txRef:
          type: string
        # transactionDetails omitted for brevity
        shippingAddress:
          type: string
          nullable: true
        # shippingLocation omitted for brevity
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - user
        - cart
        - items
        - pricing
        - paymentStatus
        - orderStatus

    Review:
      type: object
      properties:
        _id:
          type: string
        user:
          type: string
        book:
          type: string
        rating:
          type: number
        comment:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - user
        - book
        - rating

    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error

    AdminDashboardOverview:
      type: object
      properties:
        totalUsers:
          type: integer
        totalProducts:
          type: integer
        totalOrders:
          type: integer
        # Add other relevant stats

    MaintenanceMode:
      type: object
      properties:
        isActive:
          type: boolean
        message:
          type: string
          nullable: true
    
    SuccessMessage: # Simple success message schema
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    MaintenanceToggleResponse: # Schema for the actual maintenance response
      type: object
      properties:
        success:
          type: boolean
        maintenanceMode:
          type: boolean

paths:
  # Authentication Routes
  /api/auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
                role: { type: string, enum: [seller, buyer] } # Admin creation might be separate
              required: [name, email, password, role]
      responses:
        '201':
          description: User created
          content: { application/json: { schema: { properties: { token: { type: string }, user: { $ref: '#/components/schemas/User' } } } } }
        '400':
          description: Bad request
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }

  /api/auth/login:
    post:
      tags: [Authentication]
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: { email: { type: string }, password: { type: string } }
              required: [email, password]
      responses:
        '200':
          description: Login successful
          content: { application/json: { schema: { properties: { token: { type: string }, user: { $ref: '#/components/schemas/User' } } } } }
        '401':
          description: Invalid credentials
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }

  /api/auth/me:
    get:
      tags: [Authentication]
      summary: Get current user details
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: Current user
          content: { application/json: { schema: { $ref: '#/components/schemas/User' } } }
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }

  /api/auth/inviteAdmin:
    post:
      tags: [Authentication]
      summary: Invite a new admin (admin only)
      description: Sends an invitation email to a specified email address to register as an admin. Requires the inviter to be an admin.
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user to invite as an admin.
              required: [email]
      responses:
        '200':
          description: Invitation sent successfully
          content: { application/json: { schema: { type: object, properties: { message: { type: string } } } } }
        '400':
          description: Bad Request (e.g., invalid email format, user already exists)
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }
        '401':
          description: Unauthorized (Not logged in)
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }
        '403':
          description: Forbidden (User is not an admin)
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }
        '500':
          description: Server Error (e.g., failed to send email)
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }

  # User Routes
  /api/users/library:
    get:
      tags: [Users]
      summary: Get user's library of purchased books
      description: Retrieves the authenticated user’s library of purchased digital books and audiobooks, including access URLs.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User's library
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object # Define a schema for LibraryItem if more details are needed
                  properties:
                    book:
                      $ref: '#/components/schemas/Book'
                    accessUrl:
                      type: string
                      description: URL to stream or access the book/audiobook.
        '401':
          description: Unauthorized
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }

  # Book Routes
  /api/books/createBook:
    post:
      tags: [Books]
      summary: Create a new book (seller only)
      description: Allows a seller to create a new book listing. Supports physical books, digital e-books (PDFs), and audiobooks (MP3s).
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title: { type: string }
                author: { type: string }
                description: { type: string }
                price: { type: number }
                stock: { type: integer, nullable: true }
                category: { type: string, enum: [Fiction, Non-Fiction, Science, History, Biography, Other] }
                isbn: { type: string }
                isDigital: { type: boolean, default: false, description: "True if this is a digital e-book (PDF)." }
                isAudiobook: { type: boolean, default: false, description: "True if this is an audiobook (MP3)." }
                file: { type: string, format: binary, description: "Digital e-book file (e.g., PDF), required if isDigital is true." }
                audioFile: { type: string, format: binary, description: "Audiobook file (e.g., MP3), required if isAudiobook is true." }
                image: { type: string, format: binary, description: "Book cover image." }
              required: [title, author, price, category, isbn, image] # file/audioFile conditional
      responses:
        '201':
          description: Book created
          content: { application/json: { schema: { $ref: '#/components/schemas/Book' } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden (not a seller), content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/books/digital:
    get:
      tags: [Books]
      summary: Get all digital e-books
      responses:
        '200':
          description: List of digital e-books
          content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Book' } } } }

  /api/books/physical:
    get:
      tags: [Books]
      summary: Get all physical books
      responses:
        '200':
          description: List of physical books
          content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Book' } } } }

  /api/books/audiobooks:
    get:
      tags: [Books]
      summary: Get all audiobooks
      description: Retrieves a list of all audiobooks with filtering and sorting options.
      responses:
        '200':
          description: List of audiobooks
          content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Book' } } } }
        # Add parameters for filtering/sorting if applicable

  /api/books/my-books:
    get:
      tags: [Books]
      summary: Get seller's books
      description: Retrieves books listed by the authenticated seller, including audiobooks.
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: List of seller's books
          content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Book' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/books/{id}:
    get:
      tags: [Books]
      summary: Get a single book by ID
      parameters: [{ name: id, in: path, required: true, schema: { type: string } }]
      responses:
        '200':
          description: Book details
          content: { application/json: { schema: { $ref: '#/components/schemas/Book' } } }
        '404': { description: Book not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    put:
      tags: [Books]
      summary: Update a book (seller only)
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string } }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties: # Same as POST /api/books
                title: { type: string }
                author: { type: string }
                description: { type: string }
                price: { type: number }
                stock: { type: integer, nullable: true }
                category: { type: string, enum: [Fiction, Non-Fiction, Science, History, Biography, Other] }
                isbn: { type: string }
                isDigital: { type: boolean }
                isAudiobook: { type: boolean }
                file: { type: string, format: binary, nullable: true }
                audioFile: { type: string, format: binary, nullable: true }
                image: { type: string, format: binary, nullable: true }
      responses:
        '200':
          description: Book updated
          content: { application/json: { schema: { $ref: '#/components/schemas/Book' } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Book not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    delete:
      tags: [Books]
      summary: Delete a book (seller or admin only)
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string } }]
      responses:
        '200':
          description: Book deleted
          content: { application/json: { schema: { type: object, properties: { message: { type: string } } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Book not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  # Cart Routes (assuming paths from original swagger, as diff didn't specify cart changes)
  /api/cart/getCart:
    get:
      tags: [Cart]
      summary: Get user's cart
      security: [{ BearerAuth: [] }]
      responses:
        '200': { description: User's cart, content: { application/json: { schema: { $ref: '#/components/schemas/Cart' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/cart/createCart: # Should likely be POST /api/cart
    post:
      tags: [Cart]
      summary: Add item to cart
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, properties: { bookId: { type: string }, quantity: { type: integer } }, required: [bookId, quantity] }
      responses:
        '200': { description: Item added, content: { application/json: { schema: { $ref: '#/components/schemas/Cart' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/cart/updateCart/{id}: # Should likely be PUT /api/cart/{itemId}
    put:
      tags: [Cart]
      summary: Update cart item quantity
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string }, description: "Cart item ID" }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, properties: { quantity: { type: integer } }, required: [quantity] }
      responses:
        '200': { description: Cart updated, content: { application/json: { schema: { $ref: '#/components/schemas/Cart' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Item not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/cart/deleteCart/{id}: # Should likely be DELETE /api/cart/{itemId}
    delete:
      tags: [Cart]
      summary: Delete cart item
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string }, description: "Cart item ID" }]
      responses:
        '200': { description: Item deleted, content: { application/json: { schema: { type: object, properties: { message: { type: string } } } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Item not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  # Order Routes
  /api/order:
    post:
      tags: [Orders]
      summary: Create a new order
      description: Creates an order from cart items. Handles physical, digital, and audiobook items appropriately (e.g., no shipping for digital/audio).
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: # Original schema from swagger
              type: object
              properties:
                itemsId: { type: array, items: { type: string } } # Assuming these are cart item IDs
                shippingAddress: { type: string, nullable: true }
                shippingLocation: { type: object, properties: { type: { type: string, enum: [Point] }, coordinates: { type: array, items: { type: number } } }, nullable: true }
              required: [itemsId]
      responses:
        '201':
          description: Order created, payment initiated
          content: { application/json: { schema: { type: object, properties: { txRef: { type: string }, checkoutUrl: { type: string } } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    get:
      tags: [Orders]
      summary: Get all orders for the user/seller
      security: [{ BearerAuth: [] }]
      responses:
        '200': { description: List of orders, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Order' } } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/order/{id}:
    get:
      tags: [Orders]
      summary: Get a single order by ID
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string } }]
      responses:
        '200': { description: Order details, content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Order not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    delete: # This was /api/order/deleteOrder/{id}
      tags: [Orders]
      summary: Delete an order (seller/admin only)
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string } }]
      responses:
        '200': { description: Order deleted, content: { application/json: { schema: { type: object, properties: { message: { type: string } } } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Order not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/order/{id}/status: # This was /api/order/updateOrder/{id}/status
    put:
      tags: [Orders]
      summary: Update order status (seller only)
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string } }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, properties: { orderStatus: { type: string, enum: [processing, shipped, delivered, canceled] } }, required: [orderStatus] }
      responses:
        '200': { description: Order status updated, content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Order not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/order/updateStatus/{id}/cancel: # Kept original path as diff didn't specify change
    put:
      tags: [Orders]
      summary: Cancel an order
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string } }]
      responses:
        '200': { description: Order canceled, content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Order not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/order/stream/{bookId}:
    get:
      tags: [Orders]
      summary: Stream a digital book or audiobook
      description: Streams a purchased digital book (PDF) or audiobook (MP3).
      security: [{ BearerAuth: [] }]
      parameters:
        - { name: bookId, in: path, required: true, schema: { type: string } }
        - { name: download, in: query, schema: { type: boolean }, description: "If true, prompts download." }
      responses:
        '200':
          description: Streams the book/audiobook content.
          content:
            application/pdf:
              schema: { type: string, format: binary, description: "Content for PDF e-books." }
            audio/mpeg:
              schema: { type: string, format: binary, description: "Content for MP3 audiobooks." }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Book not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/order/payment-success:
    get:
      tags: [Orders]
      summary: Payment success details
      parameters: [{ name: tx_ref, in: query, required: true, schema: { type: string } }]
      responses:
        '200':
          description: Payment successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  orderDetails:
                    type: object
                    properties:
                      items:
                        type: array
                        items:
                          type: object
                          properties:
                            bookTitle: { type: string }
                            price: { type: number }
                            quantity: { type: integer }
                            isDigital: { type: boolean }
                            isAudiobook: { type: boolean } # Added
                            accessUrl: { type: string, description: "Access URL for digital/audiobook content." } # Updated
                      # pricing and paymentDetails from original swagger
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  # Review Routes (assuming paths from original swagger)
  /api/reviews/{bookId}/reviews:
    post:
      tags: [Reviews]
      summary: Create a review for a book
      security: [{ BearerAuth: [] }]
      parameters: [{ name: bookId, in: path, required: true, schema: { type: string } }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, properties: { rating: { type: number, minimum: 1, maximum: 5 }, comment: { type: string, maxLength: 500 } }, required: [rating] }
      responses:
        '201': { description: Review created, content: { application/json: { schema: { $ref: '#/components/schemas/Review' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Book not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    get:
      tags: [Reviews]
      summary: Get reviews for a book
      parameters: [{ name: bookId, in: path, required: true, schema: { type: string } }]
      responses:
        '200': { description: List of reviews, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Review' } } } } }
        '404': { description: Book not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/reviews/{bookId}/reviews/{reviewId}:
    put:
      tags: [Reviews]
      summary: Update a review
      security: [{ BearerAuth: [] }]
      parameters:
        - { name: bookId, in: path, required: true, schema: { type: string } }
        - { name: reviewId, in: path, required: true, schema: { type: string } }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, properties: { rating: { type: number, minimum: 1, maximum: 5 }, comment: { type: string, maxLength: 500 } }, required: [rating] }
      responses:
        '200': { description: Review updated, content: { application/json: { schema: { $ref: '#/components/schemas/Review' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Review/book not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    delete:
      tags: [Reviews]
      summary: Delete a review
      security: [{ BearerAuth: [] }]
      parameters:
        - { name: bookId, in: path, required: true, schema: { type: string } }
        - { name: reviewId, in: path, required: true, schema: { type: string } }
      responses:
        '200': { description: Review deleted, content: { application/json: { schema: { type: object, properties: { message: { type: string } } } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Review/book not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  # Admin Routes
  /api/admin/dashboard:
    get:
      tags: [Admin]
      summary: Get admin dashboard overview
      description: Retrieves dashboard overview (total users, products, etc.). Requires admin role.
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: Dashboard overview
          content: { application/json: { schema: { $ref: '#/components/schemas/AdminDashboardOverview' } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden (not an admin), content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/admin/users:
    get:
      tags: [Admin]
      summary: List all users (admin only)
      description: Requires admin role.
      security: [{ BearerAuth: [] }]
      responses:
        '200': { description: List of users, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/User' } } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/admin/createUsers: # Corrected path
    post:
      tags: [Admin]
      summary: Create a new user (admin only)
      description: Allows admin to create any type of user. Requires admin role.
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
                role: { type: string, enum: [seller, buyer, admin] }
              required: [name, email, password, role]
      responses:
        '201': { description: User created, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/admin/users/{id}:
    get:
      tags: [Admin]
      summary: Get a single user by ID (admin only)
      description: Requires admin role.
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string } }]
      responses:
        '200': { description: User details, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: User not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    delete:
      tags: [Admin]
      summary: Delete a user (admin only)
      description: Requires admin role.
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string } }]
      responses:
        '200': { description: User deleted, content: { application/json: { schema: { type: object, properties: { message: { type: string } } } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: User not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/admin/users/{id}/block:
    put:
      tags: [Admin]
      summary: Block a user (admin only)
      description: Blocks a user by setting their isEmailConfirmed status to false. Requires admin role. No request body needed.
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string } }]
      responses:
        '200': { description: User blocked successfully, content: { application/json: { schema: { $ref: '#/components/schemas/SuccessMessage' } } } }
        '400': { description: Invalid user ID, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: User not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/admin/users/{id}/unblock: # Added unblock endpoint
    put:
      tags: [Admin]
      summary: Unblock a user (admin only)
      description: Unblocks a user by setting their isEmailConfirmed status to true. Requires admin role. No request body needed.
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string } }]
      responses:
        '200': { description: User unblocked successfully, content: { application/json: { schema: { $ref: '#/components/schemas/SuccessMessage' } } } }
        '400': { description: Invalid user ID, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: User not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/admin/products:
    get:
      tags: [Admin]
      summary: List all products (admin only)
      description: Retrieves all books. Requires admin role.
      security: [{ BearerAuth: [] }]
      responses:
        '200': { description: List of products, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Book' } } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/admin/newProducts: # Corrected path
    post:
      tags: [Admin]
      summary: Create a new product (admin only)
      description: Same as POST /api/books but for admin. Requires admin role.
      security: [{ BearerAuth: [] }]
      requestBody: # Same as POST /api/books
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title: { type: string }
                author: { type: string }
                description: { type: string }
                price: { type: number }
                stock: { type: integer, nullable: true }
                category: { type: string, enum: [Fiction, Non-Fiction, Science, History, Biography, Other] }
                isbn: { type: string }
                isDigital: { type: boolean, default: false }
                isAudiobook: { type: boolean, default: false }
                file: { type: string, format: binary, nullable: true }
                audioFile: { type: string, format: binary, nullable: true }
                image: { type: string, format: binary }
                seller: { type: string, description: "ID of the seller if admin is creating on behalf of someone" } # Admin might specify seller
              required: [title, author, price, category, isbn, image, seller]
      responses:
        '201': { description: Product created, content: { application/json: { schema: { $ref: '#/components/schemas/Book' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/admin/products/{id}:
    put:
      tags: [Admin]
      summary: Update a product (admin only)
      description: Same as PUT /api/books/{id} but for admin. Requires admin role.
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string } }]
      requestBody: # Same as PUT /api/books/{id}
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title: { type: string }
                # ... other book properties
                seller: { type: string, nullable: true } # Admin might change seller
      responses:
        '200': { description: Product updated, content: { application/json: { schema: { $ref: '#/components/schemas/Book' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Product not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
    delete:
      tags: [Admin]
      summary: Delete a product (admin only)
      description: Same as DELETE /api/books/{id} but for admin. Requires admin role.
      security: [{ BearerAuth: [] }]
      parameters: [{ name: id, in: path, required: true, schema: { type: string } }]
      responses:
        '200': { description: Product deleted, content: { application/json: { schema: { type: object, properties: { message: { type: string } } } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '404': { description: Product not found, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/admin/profile:
    put:
      tags: [Admin]
      summary: Update admin's profile
      description: Requires admin role.
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object # Define admin profile update schema
              properties:
                name: { type: string }
                email: { type: string }
                # other updatable fields
      responses:
        '200': { description: Admin profile updated, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }

  /api/admin/maintenance:
    put:
      tags: [Admin]
      summary: Toggle maintenance mode (admin only)
      description: Requires admin role.
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled: # Changed from isActive
                  type: boolean
                  description: Set to true to enable maintenance mode, false to disable.
              required: [enabled] # Changed from isActive
      responses:
        '200': { description: Maintenance mode status updated, content: { application/json: { schema: { $ref: '#/components/schemas/MaintenanceToggleResponse' } } } } # Updated response schema
        '400': { description: 'Bad Request (e.g., invalid ''enabled'' value)', content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '403': { description: Forbidden, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
        '500': { description: Server Error, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
