openapi: 3.0.3
info:
  title: Book Marketplace API
  description: API for a book marketplace application allowing users to buy, sell, and review physical, digital, and audiobook products.
  version: 1.0.0
servers:
  - url: http://localhost:5000
    description: Local development server
  - url: https://bookcompass.onrender.com
    description: Production server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the user
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        role:
          type: string
          enum: [seller, buyer, admin]
          description: User's role in the platform
        location:
          type: object
          properties:
            address:
              type: string
            coordinates:
              type: object
              properties:
                lat:
                  type: number
                lng:
                  type: number
        profileImageUrl:
          type: string
          format: uri
          description: URL to the user's profile image
        isEmailConfirmed:
          type: boolean
          description: Whether the user's email is confirmed
      required:
        - name
        - email
        - role
    Book:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the book
        title:
          type: string
          description: Book title
        author:
          type: string
          description: Book author
        description:
          type: string
          description: Book description
        price:
          type: number
          description: Book price
        stock:
          type: number
          description: Stock quantity for physical books
        category:
          type: string
          enum: [Fiction, Non-Fiction, Science, History, Biography, Children, Fantasy, Mystery, Romance, Other]
          description: Book category
        imageUrl:
          type: string
          format: uri
          description: URL to the book cover image
        seller:
          type: string
          description: ID of the seller
        isbn:
          type: string
          description: Book ISBN (10 or 13 digits)
        isDigital:
          type: boolean
          description: Whether the book is digital
        isAudiobook:
          type: boolean
          description: Whether the book is an audiobook
        fileUrl:
          type: string
          format: uri
          description: URL to the digital book or audiobook file
        averageRating:
          type: number
          description: Average rating of the book
        numReviews:
          type: number
          description: Number of reviews for the book
      required:
        - title
        - author
        - price
        - category
        - seller
        - isbn
    Cart:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the cart
        user:
          type: string
          description: ID of the user owning the cart
        items:
          type: array
          items:
            type: object
            properties:
              book:
                type: string
                description: ID of the book
              quantity:
                type: number
                description: Quantity of the book in the cart
              price:
                type: number
                description: Price per book
        totalPrice:
          type: number
          description: Total price of items in the cart
      required:
        - user
        - items
    Review:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the review
        user:
          type: string
          description: ID of the reviewer
        book:
          type: string
          description: ID of the book being reviewed
        rating:
          type: number
          minimum: 1
          maximum: 5
          description: Rating given by the reviewer
        comment:
          type: string
          description: Optional comment for the review
        createdAt:
          type: string
          format: date-time
          description: Date the review was created
      required:
        - user
        - book
        - rating
    Order:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the order
        user:
          type: string
          description: ID of the user who placed the order
        cart:
          type: string
          description: ID of the cart associated with the order
        items:
          type: array
          items:
            type: object
            properties:
              seller:
                type: string
                description: ID of the seller
              book:
                type: string
                description: ID of the book
              quantity:
                type: number
                description: Quantity ordered
              price:
                type: number
                description: Price per book
        pricing:
          type: object
          properties:
            subtotal:
              type: number
            deliveryFee:
              type: number
            total:
              type: number
            sellerBreakdown:
              type: array
              items:
                type: object
                properties:
                  seller:
                    type: string
                  subtotal:
                    type: number
                  deliveryFee:
                    type: number
                  total:
                    type: number
                  distance:
                    type: number
                  fromLocation:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: [Point]
                      coordinates:
                        type: array
                        items:
                          type: number
                  toLocation:
                    type: object
                    properties:
                      type:
                        type: string
                        enum: [Point]
                      coordinates:
                        type: array
                        items:
                          type: number
        paymentStatus:
          type: string
          enum: [pending, paid, failed]
          description: Status of the payment
        orderStatus:
          type: string
          enum: [processing, shipped, delivered, canceled]
          description: Status of the order
        txRef:
          type: string
          description: Transaction reference
        shippingAddress:
          type: string
          description: Shipping address for the order
        shippingLocation:
          type: object
          properties:
            type:
              type: string
              enum: [Point]
            coordinates:
              type: array
              items:
                type: number
      required:
        - user
        - cart
        - pricing
    Settings:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the settings
        key:
          type: string
          description: Fixed key for the settings document
        isMaintenanceMode:
          type: boolean
          description: Whether the application is in maintenance mode
      required:
        - key
        - isMaintenanceMode
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message
      required:
        - success
        - error
paths:
  /api/auth/me:
    get:
      summary: Get current user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  example: Password123
                role:
                  type: string
                  enum: [seller, buyer]
                  example: buyer
              required:
                - name
                - email
                - password
                - role
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  example: Password123
              required:
                - email
                - password
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/forgotPassword:
    post:
      summary: Request password reset
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
              required:
                - email
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password reset email sent
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/resetPassword/{token}:
    put:
      summary: Reset password
      tags: [Auth]
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Password reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: NewPassword123
              required:
                - password
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/confirmEmail/{token}:
    get:
      summary: Confirm email address
      tags: [Auth]
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Email confirmation token
      responses:
        '200':
          description: Email confirmed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Email confirmed successfully
        '400':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/auth/inviteAdmin:
    post:
      summary: Invite a new admin
      tags: [Auth]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: admin@example.com
                name:
                  type: string
                  example: Admin User
              required:
                - email
                - name
      responses:
        '201':
          description: Admin invited
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Admin invited successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/cart/getCart:
    get:
      summary: Get user's cart
      tags: [Cart]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/cart/createCart:
    post:
      summary: Add item to cart
      tags: [Cart]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bookId:
                  type: string
                  example: 507f1f77bcf86cd799439011
                quantity:
                  type: number
                  example: 1
              required:
                - bookId
                - quantity
      responses:
        '201':
          description: Item added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Cart'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/cart/updateCart/{id}:
    put:
      summary: Update cart item quantity
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Book ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: number
                  example: 2
              required:
                - quantity
      responses:
        '200':
          description: Cart updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Cart'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/cart/deleteCart/{id}:
    delete:
      summary: Remove item from cart
      tags: [Cart]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Book ID
      responses:
        '200':
          description: Item removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/dashboard:
    get:
      summary: Get admin dashboard overview
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard data retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      totalUsers:
                        type: number
                      totalBooks:
                        type: number
                      totalOrders:
                        type: number
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/users:
    get:
      summary: Get all users
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/users/{id}:
    get:
      summary: Get a user by ID
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a user
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    example: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/createUsers:
    post:
      summary: Create a new user
      tags: [Admin]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Jane Doe
                email:
                  type: string
                  format: email
                  example: jane@example.com
                password:
                  type: string
                  example: Password123
                role:
                  type: string
                  enum: [seller, buyer, admin]
                  example: buyer
              required:
                - name
                - email
                - password
                - role
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/users/{id}/block:
    put:
      summary: Block a user
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User blocked
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/users/{id}/unblock:
    put:
      summary: Unblock a user
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User unblocked
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/products:
    get:
      summary: Get all products
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/newProducts:
    post:
      summary: Create a new product
      tags: [Admin]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: The Great Gatsby
                author:
                  type: string
                  example: F. Scott Fitzgerald
                description:
                  type: string
                price:
                  type: number
                  example: 19.99
                stock:
                  type: number
                  example: 50
                category:
                  type: string
                  enum: [Fiction, Non-Fiction, Science, History, Biography, Children, Fantasy, Mystery, Romance, Other]
                  example: Fiction
                isbn:
                  type: string
                  example: 978-0743273565
                isDigital:
                  type: boolean
                  example: false
                isAudiobook:
                  type: boolean
                  example: false
                image:
                  type: string
                  format: binary
                file:
                  type: string
                  format: binary
              required:
                - title
                - author
                - price
                - category
                - isbn
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/products/{id}:
    put:
      summary: Update a product
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: number
                category:
                  type: string
                  enum: [Fiction, Non-Fiction, Science, History, Biography, Children, Fantasy, Mystery, Romance, Other]
                isbn:
                  type: string
                isDigital:
                  type: boolean
                isAudiobook:
                  type: boolean
                image:
                  type: string
                  format: binary
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        '200':
          description: Product deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    example: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/profile:
    put:
      summary: Update admin profile
      tags: [Admin]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Admin User
                email:
                  type: string
                  format: email
                  example: admin@example.com
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/admin/maintenance:
    put:
      summary: Toggle maintenance mode
      tags: [Admin]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isMaintenanceMode:
                  type: boolean
                  example: true
              required:
                - isMaintenanceMode
      responses:
        '200':
          description: Maintenance mode toggled
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Settings'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/books/getDigitalBooks:
    get:
      summary: Get all digital books
      tags: [Book]
      responses:
        '200':
          description: List of digital books
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/books/getPhysicalBooks:
    get:
      summary: Get all physical books
      tags: [Book]
      responses:
        '200':
          description: List of physical books
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/books/audiobooks:
    get:
      summary: Get all audiobooks
      tags: [Book]
      responses:
        '200':
          description: List of audiobooks
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/books/singleBook/{id}:
    get:
      summary: Get a single book by ID
      tags: [Book]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Book ID
      responses:
        '200':
          description: Book details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/books/getBook/myBooks:
    get:
      summary: Get seller's books
      tags: [Book]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of seller's books
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/books/createBook:
    post:
      summary: Create a new book
      tags: [Book]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: The Great Gatsby
                author:
                  type: string
                  example: F. Scott Fitzgerald
                description:
                  type: string
                price:
                  type: number
                  example: 19.99
                stock:
                  type: number
                  example: 50
                category:
                  type: string
                  enum: [Fiction, Non-Fiction, Science, History, Biography, Children, Fantasy, Mystery, Romance, Other]
                  example: Fiction
                isbn:
                  type: string
                  example: 978-0743273565
                isDigital:
                  type: boolean
                  example: false
                isAudiobook:
                  type: boolean
                  example: false
                image:
                  type: string
                  format: binary
                file:
                  type: string
                  format: binary
              required:
                - title
                - author
                - price
                - category
                - isbn
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/books/updateBook/{id}:
    put:
      summary: Update a book
      tags: [Book]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Book ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                author:
                  type: string
                description:
                  type: string
                price:
                  type: number
                stock:
                  type: number
                category:
                  type: string
                  enum: [Fiction, Non-Fiction, Science, History, Biography, Children, Fantasy, Mystery, Romance, Other]
                isbn:
                  type: string
                isDigital:
                  type: boolean
                isAudiobook:
                  type: boolean
                image:
                  type: string
                  format: binary
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Book updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/books/deleteBook/{id}:
    delete:
      summary: Delete a book
      tags: [Book]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Book ID
      responses:
        '200':
          description: Book deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    example: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/reviews/{bookId}/reviews:
    post:
      summary: Create a review for a book
      tags: [Review]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
          description: Book ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                  example: 4
                comment:
                  type: string
                  example: Great book!
              required:
                - rating
      responses:
        '201':
          description: Review created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  review:
                    $ref: '#/components/schemas/Review'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get reviews for a book
      tags: [Review]
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
          description: Book ID
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/reviews/{bookId}/reviews/{reviewId}:
    put:
      summary: Update a review
      tags: [Review]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
          description: Book ID
        - in: path
          name: reviewId
          required: true
          schema:
            type: string
          description: Review ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                  example: 5
                comment:
                  type: string
                  example: Updated review
      responses:
        '200':
          description: Review updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Review'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a review
      tags: [Review]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
          description: Book ID
        - in: path
          name: reviewId
          required: true
          schema:
            type: string
          description: Review ID
      responses:
        '200':
          description: Review deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    example: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Review not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/order/createOrder:
    post:
      summary: Create a new order
      tags: [Order]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemsId:
                  type: string
                  example: 507f1f77bcf86cd799439011
                shippingAddress:
                  type: string
                  example: 123 Main St, Addis Ababa
              required:
                - cartId
                - shippingAddress
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/order/getOrder:
    get:
      summary: Get user's or seller's orders
      tags: [Order]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/order/getOrder/{id}:
    get:
      summary: Get a single order by ID
      tags: [Order]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/order/updateOrder/{id}/status:
    put:
      summary: Update order status
      tags: [Order]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderStatus:
                  type: string
                  enum: [processing, shipped, delivered, canceled]
                  example: shipped
              required:
                - orderStatus
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/order/updateStatus/{id}/cancel:
    put:
      summary: Cancel an order
      tags: [Order]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cancellationReason:
                  type: string
                  example: Changed my mind
              required:
                - cancellationReason
      responses:
        '200':
          description: Order canceled
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/order/deleteOrder/{id}:
    delete:
      summary: Delete an order
      tags: [Order]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Order ID
      responses:
        '200':
          description: Order deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    example: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/order/reports:
    get:
      summary: Get order reports
      tags: [Order]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Order reports
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      totalOrders:
                        type: number
                      totalRevenue:
                        type: number
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/order/payment-callback:
    get:
      summary: Handle payment callback from Chapa
      tags: [Order]
      responses:
        '200':
          description: Payment callback processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Payment processed
  /api/order/payment-success:
    get:
      summary: Payment success page
      tags: [Order]
      responses:
        '200':
          description: Payment success
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Payment successful
  /api/order/stream/{bookId}:
    get:
      summary: Stream a digital book
      tags: [Order]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: bookId
          required: true
          schema:
            type: string
          description: Book ID
      responses:
        '200':
          description: Streaming response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/user:
    post:
      summary: Create a new user
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Jane Doe
                email:
                  type: string
                  format: email
                  example: jane@example.com
                password:
                  type: string
                  example: Password123
                role:
                  type: string
                  enum: [seller, buyer]
                  example: buyer
              required:
                - name
                - email
                - password
                - role
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all users
      tags: [User]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/user/{id}:
    get:
      summary: Get a user by ID
      tags: [User]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a user
      tags: [User]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                location:
                  type: object
                  properties:
                    address:
                      type: string
                    coordinates:
                      type: object
                      properties:
                        lat:
                          type: number
                        lng:
                          type: number
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a user
      tags: [User]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    example: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/user/library:
    get:
      summary: Get user's library
      tags: [User]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User's library
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Book'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/webhook/chapa:
    post:
      summary: Handle Chapa webhook
      tags: [Webhook]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                event:
                  type: string
                  example: payment.succeeded
                data:
                  type: object
                  properties:
                    tx_ref:
                      type: string
                    status:
                      type: string
      responses:
        '200':
          description: Webhook processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Webhook processed successfully